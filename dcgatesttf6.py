
import tensorflow as tf
from blademul5 import *
import numpy as np
import pyvista as pv
import time
import itertools
dcga=algebra(8,2)

#e1=1,e2=1,e3=1,e4=1,e5=-1,e6=1,e7=1,e8=1,e9=1,e10=-1
#skalar,e1,e2,e3,e4,e6,e7,e8,e9,e5,e10,*_=dcga.allblades()
#multivec=sortgeo(dcga)

#algebra declaration
multivec=sortgeotf(dcga,[])
e1,e2,e3,e4,e6,e7,e8,e9,e5,e10=multivec.monoblades()

dcga.bladenames="1,2,3,4,6,7,8,9,5,10".split(",")
print(e1,e2,e3,e4,e6,e7,e8,e9,e5,e10)
eo1=0.5*e5-0.5*e4
eo2=0.5*e10-0.5*e9
ei1=e4+e5
ei2=e9+e10


def point1(x,y,z):
    return e1*x+e2*y+e3*z+ei1*(.5*(x*x+y*y+z*z))+eo1
def point2(x,y,z):
    return e6*x+e7*y+e8*z+ei2*(.5*(x*x+y*y+z*z))+eo2

def point(x,y,z):
    return point1(x,y,z).outer(point2(x,y,z))

eo=eo1.outer(eo2)
ei=ei1.outer(ei2)
Txx=e6.outer(e1)
Tyy=e7.outer(e2)

def CGA1_Plane(x,y,z,h):
    vec=(x*e1+y*e2+z*e3)
    return vec*(1/np.sqrt(vec.inner(vec).toscalar()))+h*ei1
def CGA2_Plane(x,y,z,h):
    vec=(x*e6+y*e7+z*e8)
    return vec*(1/np.sqrt(vec.inner(vec).toscalar()))+h*ei2
#CGA2_Plane = { Normalize(_P(1)*e6 + _P(2)*e7 + _P(3)*e8) + _P(4)*ei2 }
def Plane(x,y,z,h):
    return CGA1_Plane(x,y,z,h)^CGA2_Plane(x,y,z,h)
#Plane = {
# CGA1_Plane(_P(1),_P(2),_P(3),_P(4))^CGA2_Plane(_P(1),_P(2),_P(3),_P(4))
#}

T1=-ei
Tt2=eo2.outer(ei1)+ei2.outer(eo1)
Tt4=-4*eo

def toroid(R,r):
    dSq=R*R-r*r
    return Tt4+2*Tt2*dSq+T1*dSq*dSq-4*R*R*(Txx+Tyy)



#constructing objects to plot
t=toroid(1,0.5)
p=Plane(2,0,0,0)



#for x in np.mgrid[-1:1:5j]:
#    print(p.inner(point(x,0,0)))



vis=t.inner(p)
#pyvista setup
pv.set_plot_theme('dark')
p = pv.Plotter()
p.add_axes()
p.show_grid()

t0=time.time() 
step=51
#x, y, z = 2*np.mgrid[-1:1:100j, -1:1:100j, -1:1:100j]
x, y, z = 2*np.mgrid[-1:1:step*1J, -1:1:step*1J, -1:1:step*1J]
grid = pv.StructuredGrid(x, y, z)

#ipns generation with derivative
xtf,ytf,ztf=[tf.Variable(i) for i in (x,y,z)]
with tf.GradientTape(persistent=True) as tape:
    points=point(xtf,ytf,ztf)
    #vol=points.inner(vis).toscalar()
    #voltf=vol**2
    #voltf=tf.abs(vol)
    voltf=sum(tf.abs(blade.magnitude) for blade in points.inner(vis).lst)
    vol=voltf

delta=np.stack([tape.gradient(voltf, xtf).numpy(),tape.gradient(voltf, ytf).numpy(),tape.gradient(voltf, ztf).numpy()],axis=3)
del tape
vol=vol.numpy()

#normalization
def normalized(a, axis=-1, order=2):
    l2 = np.atleast_1d(np.linalg.norm(a, order, axis))
    l2[l2==0] = 1
    return a / np.expand_dims(l2, axis)
delta=normalized(delta)

lot=[[], [(0, 3, 8)], [(0, 9, 1)], [(3, 8, 1), (1, 8, 9)], [(2, 11, 3)], [(8, 0, 11), (11, 0, 2)], [(3, 2, 11), (1, 0, 9)], [(11, 1, 2), (11, 9, 1), (11, 8, 9)], [(1, 10, 2)], [(0, 3, 8), (2, 1, 10)], [(10, 2, 9), (9, 2, 0)], [(8, 2, 3), (8, 10, 2), (8, 9, 10)], [(11, 3, 10), (10, 3, 1)], [(10, 0, 1), (10, 8, 0), (10, 11, 8)], [(9, 3, 0), (9, 11, 3), (9, 10, 11)], [(8, 9, 11), (11, 9, 10)], [(4, 8, 7)], [(7, 4, 3), (3, 4, 0)], [(4, 8, 7), (0, 9, 1)], [(1, 4, 9), (1, 7, 4), (1, 3, 7)], [(8, 7, 4), (11, 3, 2)], [(4, 11, 7), (4, 2, 11), (4, 0, 2)], [(0, 9, 1), (8, 7, 4), (11, 3, 2)], [(7, 4, 11), (11, 4, 2), (2, 4, 9), (2, 9, 1)], [(4, 8, 7), (2, 1, 10)], [(7, 4, 3), (3, 4, 0), (10, 2, 1)], [(10, 2, 9), (9, 2, 0), (7, 4, 8)], [(10, 2, 3), (10, 3, 4), (3, 7, 4), (9, 10, 4)], [(1, 10, 3), (3, 10, 11), (4, 8, 7)], [(10, 11, 1), (11, 7, 4), (1, 11, 4), (1, 4, 0)], [(7, 4, 8), (9, 3, 0), (9, 11, 3), (9, 10, 11)], [(7, 4, 11), (4, 9, 11), (9, 10, 11)], [(9, 4, 5)], [(9, 4, 5), (8, 0, 3)], [(4, 5, 0), (0, 5, 1)], [(5, 8, 4), (5, 3, 8), (5, 1, 3)], [(9, 4, 5), (11, 3, 2)], [(2, 11, 0), (0, 11, 8), (5, 9, 4)], [(4, 5, 0), (0, 5, 1), (11, 3, 2)], [(5, 1, 4), (1, 2, 11), (4, 1, 11), (4, 11, 8)], [(1, 10, 2), (5, 9, 4)], [(9, 4, 5), (0, 3, 8), (2, 1, 10)], [(2, 5, 10), (2, 4, 5), (2, 0, 4)], [(10, 2, 5), (5, 2, 4), (4, 2, 3), (4, 3, 8)], [(11, 3, 10), (10, 3, 1), (4, 5, 9)], [(4, 5, 9), (10, 0, 1), (10, 8, 0), (10, 11, 8)], [(11, 3, 0), (11, 0, 5), (0, 4, 5), (10, 11, 5)], [(4, 5, 8), (5, 10, 8), (10, 11, 8)], [(8, 7, 9), (9, 7, 5)], [(3, 9, 0), (3, 5, 9), (3, 7, 5)], [(7, 0, 8), (7, 1, 0), (7, 5, 1)], [(7, 5, 3), (3, 5, 1)], [(5, 9, 7), (7, 9, 8), (2, 11, 3)], [(2, 11, 7), (2, 7, 9), (7, 5, 9), (0, 2, 9)], [(2, 11, 3), (7, 0, 8), (7, 1, 0), (7, 5, 1)], [(2, 11, 1), (11, 7, 1), (7, 5, 1)], [(8, 7, 9), (9, 7, 5), (2, 1, 10)], [(10, 2, 1), (3, 9, 0), (3, 5, 9), (3, 7, 5)], [(7, 5, 8), (5, 10, 2), (8, 5, 2), (8, 2, 0)], [(10, 2, 5), (2, 3, 5), (3, 7, 5)], [(8, 7, 5), (8, 5, 9), (11, 3, 10), (3, 1, 10)], [(5, 11, 7), (10, 11, 5), (1, 9, 0)], [(11, 5, 10), (7, 5, 11), (8, 3, 0)], [(5, 11, 7), (10, 11, 5)], [(6, 7, 11)], [(7, 11, 6), (3, 8, 0)], [(6, 7, 11), (0, 9, 1)], [(9, 1, 8), (8, 1, 3), (6, 7, 11)], [(3, 2, 7), (7, 2, 6)], [(0, 7, 8), (0, 6, 7), (0, 2, 6)], [(6, 7, 2), (2, 7, 3), (9, 1, 0)], [(6, 7, 8), (6, 8, 1), (8, 9, 1), (2, 6, 1)], [(11, 6, 7), (10, 2, 1)], [(3, 8, 0), (11, 6, 7), (10, 2, 1)], [(0, 9, 2), (2, 9, 10), (7, 11, 6)], [(6, 7, 11), (8, 2, 3), (8, 10, 2), (8, 9, 10)], [(7, 10, 6), (7, 1, 10), (7, 3, 1)], [(8, 0, 7), (7, 0, 6), (6, 0, 1), (6, 1, 10)], [(7, 3, 6), (3, 0, 9), (6, 3, 9), (6, 9, 10)], [(6, 7, 10), (7, 8, 10), (8, 9, 10)], [(11, 6, 8), (8, 6, 4)], [(6, 3, 11), (6, 0, 3), (6, 4, 0)], [(11, 6, 8), (8, 6, 4), (1, 0, 9)], [(1, 3, 9), (3, 11, 6), (9, 3, 6), (9, 6, 4)], [(2, 8, 3), (2, 4, 8), (2, 6, 4)], [(4, 0, 6), (6, 0, 2)], [(9, 1, 0), (2, 8, 3), (2, 4, 8), (2, 6, 4)], [(9, 1, 4), (1, 2, 4), (2, 6, 4)], [(4, 8, 6), (6, 8, 11), (1, 10, 2)], [(1, 10, 2), (6, 3, 11), (6, 0, 3), (6, 4, 0)], [(11, 6, 4), (11, 4, 8), (10, 2, 9), (2, 0, 9)], [(10, 4, 9), (6, 4, 10), (11, 2, 3)], [(4, 8, 3), (4, 3, 10), (3, 1, 10), (6, 4, 10)], [(1, 10, 0), (10, 6, 0), (6, 4, 0)], [(4, 10, 6), (9, 10, 4), (0, 8, 3)], [(4, 10, 6), (9, 10, 4)], [(6, 7, 11), (4, 5, 9)], [(4, 5, 9), (7, 11, 6), (3, 8, 0)], [(1, 0, 5), (5, 0, 4), (11, 6, 7)], [(11, 6, 7), (5, 8, 4), (5, 3, 8), (5, 1, 3)], [(3, 2, 7), (7, 2, 6), (9, 4, 5)], [(5, 9, 4), (0, 7, 8), (0, 6, 7), (0, 2, 6)], [(3, 2, 6), (3, 6, 7), (1, 0, 5), (0, 4, 5)], [(6, 1, 2), (5, 1, 6), (4, 7, 8)], [(10, 2, 1), (6, 7, 11), (4, 5, 9)], [(0, 3, 8), (4, 5, 9), (11, 6, 7), (10, 2, 1)], [(7, 11, 6), (2, 5, 10), (2, 4, 5), (2, 0, 4)], [(8, 4, 7), (5, 10, 6), (3, 11, 2)], [(9, 4, 5), (7, 10, 6), (7, 1, 10), (7, 3, 1)], [(10, 6, 5), (7, 8, 4), (1, 9, 0)], [(4, 3, 0), (7, 3, 4), (6, 5, 10)], [(10, 6, 5), (8, 4, 7)], [(9, 6, 5), (9, 11, 6), (9, 8, 11)], [(11, 6, 3), (3, 6, 0), (0, 6, 5), (0, 5, 9)], [(11, 6, 5), (11, 5, 0), (5, 1, 0), (8, 11, 0)], [(11, 6, 3), (6, 5, 3), (5, 1, 3)], [(9, 8, 5), (8, 3, 2), (5, 8, 2), (5, 2, 6)], [(5, 9, 6), (9, 0, 6), (0, 2, 6)], [(1, 6, 5), (2, 6, 1), (3, 0, 8)], [(1, 6, 5), (2, 6, 1)], [(2, 1, 10), (9, 6, 5), (9, 11, 6), (9, 8, 11)], [(9, 0, 1), (3, 11, 2), (5, 10, 6)], [(11, 0, 8), (2, 0, 11), (10, 6, 5)], [(3, 11, 2), (5, 10, 6)], [(1, 8, 3), (9, 8, 1), (5, 10, 6)], [(6, 5, 10), (0, 1, 9)], [(8, 3, 0), (5, 10, 6)], [(6, 5, 10)], [(10, 5, 6)], [(0, 3, 8), (6, 10, 5)], [(10, 5, 6), (9, 1, 0)], [(3, 8, 1), (1, 8, 9), (6, 10, 5)], [(2, 11, 3), (6, 10, 5)], [(8, 0, 11), (11, 0, 2), (5, 6, 10)], [(1, 0, 9), (2, 11, 3), (6, 10, 5)], [(5, 6, 10), (11, 1, 2), (11, 9, 1), (11, 8, 9)], [(5, 6, 1), (1, 6, 2)], [(5, 6, 1), (1, 6, 2), (8, 0, 3)], [(6, 9, 5), (6, 0, 9), (6, 2, 0)], [(6, 2, 5), (2, 3, 8), (5, 2, 8), (5, 8, 9)], [(3, 6, 11), (3, 5, 6), (3, 1, 5)], [(8, 0, 1), (8, 1, 6), (1, 5, 6), (11, 8, 6)], [(11, 3, 6), (6, 3, 5), (5, 3, 0), (5, 0, 9)], [(5, 6, 9), (6, 11, 9), (11, 8, 9)], [(5, 6, 10), (7, 4, 8)], [(0, 3, 4), (4, 3, 7), (10, 5, 6)], [(5, 6, 10), (4, 8, 7), (0, 9, 1)], [(6, 10, 5), (1, 4, 9), (1, 7, 4), (1, 3, 7)], [(7, 4, 8), (6, 10, 5), (2, 11, 3)], [(10, 5, 6), (4, 11, 7), (4, 2, 11), (4, 0, 2)], [(4, 8, 7), (6, 10, 5), (3, 2, 11), (1, 0, 9)], [(1, 2, 10), (11, 7, 6), (9, 5, 4)], [(2, 1, 6), (6, 1, 5), (8, 7, 4)], [(0, 3, 7), (0, 7, 4), (2, 1, 6), (1, 5, 6)], [(8, 7, 4), (6, 9, 5), (6, 0, 9), (6, 2, 0)], [(7, 2, 3), (6, 2, 7), (5, 4, 9)], [(4, 8, 7), (3, 6, 11), (3, 5, 6), (3, 1, 5)], [(5, 0, 1), (4, 0, 5), (7, 6, 11)], [(9, 5, 4), (6, 11, 7), (0, 8, 3)], [(11, 7, 6), (9, 5, 4)], [(6, 10, 4), (4, 10, 9)], [(6, 10, 4), (4, 10, 9), (3, 8, 0)], [(0, 10, 1), (0, 6, 10), (0, 4, 6)], [(6, 10, 1), (6, 1, 8), (1, 3, 8), (4, 6, 8)], [(9, 4, 10), (10, 4, 6), (3, 2, 11)], [(2, 11, 8), (2, 8, 0), (6, 10, 4), (10, 9, 4)], [(11, 3, 2), (0, 10, 1), (0, 6, 10), (0, 4, 6)], [(6, 8, 4), (11, 8, 6), (2, 10, 1)], [(4, 1, 9), (4, 2, 1), (4, 6, 2)], [(3, 8, 0), (4, 1, 9), (4, 2, 1), (4, 6, 2)], [(6, 2, 4), (4, 2, 0)], [(3, 8, 2), (8, 4, 2), (4, 6, 2)], [(4, 6, 9), (6, 11, 3), (9, 6, 3), (9, 3, 1)], [(8, 6, 11), (4, 6, 8), (9, 0, 1)], [(11, 3, 6), (3, 0, 6), (0, 4, 6)], [(8, 6, 11), (4, 6, 8)], [(10, 7, 6), (10, 8, 7), (10, 9, 8)], [(3, 7, 0), (7, 6, 10), (0, 7, 10), (0, 10, 9)], [(6, 10, 7), (7, 10, 8), (8, 10, 1), (8, 1, 0)], [(6, 10, 7), (10, 1, 7), (1, 3, 7)], [(3, 2, 11), (10, 7, 6), (10, 8, 7), (10, 9, 8)], [(2, 9, 0), (10, 9, 2), (6, 11, 7)], [(0, 8, 3), (7, 6, 11), (1, 2, 10)], [(7, 6, 11), (1, 2, 10)], [(2, 1, 9), (2, 9, 7), (9, 8, 7), (6, 2, 7)], [(2, 7, 6), (3, 7, 2), (0, 1, 9)], [(8, 7, 0), (7, 6, 0), (6, 2, 0)], [(7, 2, 3), (6, 2, 7)], [(8, 1, 9), (3, 1, 8), (11, 7, 6)], [(11, 7, 6), (1, 9, 0)], [(6, 11, 7), (0, 8, 3)], [(11, 7, 6)], [(7, 11, 5), (5, 11, 10)], [(10, 5, 11), (11, 5, 7), (0, 3, 8)], [(7, 11, 5), (5, 11, 10), (0, 9, 1)], [(7, 11, 10), (7, 10, 5), (3, 8, 1), (8, 9, 1)], [(5, 2, 10), (5, 3, 2), (5, 7, 3)], [(5, 7, 10), (7, 8, 0), (10, 7, 0), (10, 0, 2)], [(0, 9, 1), (5, 2, 10), (5, 3, 2), (5, 7, 3)], [(9, 7, 8), (5, 7, 9), (10, 1, 2)], [(1, 11, 2), (1, 7, 11), (1, 5, 7)], [(8, 0, 3), (1, 11, 2), (1, 7, 11), (1, 5, 7)], [(7, 11, 2), (7, 2, 9), (2, 0, 9), (5, 7, 9)], [(7, 9, 5), (8, 9, 7), (3, 11, 2)], [(3, 1, 7), (7, 1, 5)], [(8, 0, 7), (0, 1, 7), (1, 5, 7)], [(0, 9, 3), (9, 5, 3), (5, 7, 3)], [(9, 7, 8), (5, 7, 9)], [(8, 5, 4), (8, 10, 5), (8, 11, 10)], [(0, 3, 11), (0, 11, 5), (11, 10, 5), (4, 0, 5)], [(1, 0, 9), (8, 5, 4), (8, 10, 5), (8, 11, 10)], [(10, 3, 11), (1, 3, 10), (9, 5, 4)], [(3, 2, 8), (8, 2, 4), (4, 2, 10), (4, 10, 5)], [(10, 5, 2), (5, 4, 2), (4, 0, 2)], [(5, 4, 9), (8, 3, 0), (10, 1, 2)], [(2, 10, 1), (4, 9, 5)], [(8, 11, 4), (11, 2, 1), (4, 11, 1), (4, 1, 5)], [(0, 5, 4), (1, 5, 0), (2, 3, 11)], [(0, 11, 2), (8, 11, 0), (4, 9, 5)], [(5, 4, 9), (2, 3, 11)], [(4, 8, 5), (8, 3, 5), (3, 1, 5)], [(0, 5, 4), (1, 5, 0)], [(5, 4, 9), (3, 0, 8)], [(5, 4, 9)], [(11, 4, 7), (11, 9, 4), (11, 10, 9)], [(0, 3, 8), (11, 4, 7), (11, 9, 4), (11, 10, 9)], [(11, 10, 7), (10, 1, 0), (7, 10, 0), (7, 0, 4)], [(3, 10, 1), (11, 10, 3), (7, 8, 4)], [(3, 2, 10), (3, 10, 4), (10, 9, 4), (7, 3, 4)], [(9, 2, 10), (0, 2, 9), (8, 4, 7)], [(3, 4, 7), (0, 4, 3), (1, 2, 10)], [(7, 8, 4), (10, 1, 2)], [(7, 11, 4), (4, 11, 9), (9, 11, 2), (9, 2, 1)], [(1, 9, 0), (4, 7, 8), (2, 3, 11)], [(7, 11, 4), (11, 2, 4), (2, 0, 4)], [(4, 7, 8), (2, 3, 11)], [(9, 4, 1), (4, 7, 1), (7, 3, 1)], [(7, 8, 4), (1, 9, 0)], [(3, 4, 7), (0, 4, 3)], [(7, 8, 4)], [(11, 10, 8), (8, 10, 9)], [(0, 3, 9), (3, 11, 9), (11, 10, 9)], [(1, 0, 10), (0, 8, 10), (8, 11, 10)], [(10, 3, 11), (1, 3, 10)], [(3, 2, 8), (2, 10, 8), (10, 9, 8)], [(9, 2, 10), (0, 2, 9)], [(8, 3, 0), (10, 1, 2)], [(2, 10, 1)], [(2, 1, 11), (1, 9, 11), (9, 8, 11)], [(11, 2, 3), (9, 0, 1)], [(11, 0, 8), (2, 0, 11)], [(3, 11, 2)], [(1, 8, 3), (9, 8, 1)], [(1, 9, 0)], [(8, 3, 0)], []]
verts=[[0, 1], [1, 3], [3, 2], [2, 0], [4, 5], [5, 7], [7, 6], [6, 4], [0, 4], [1, 5], [3, 7], [2, 6]]
# modified marching cubes
graycode=np.array([[0,0,0,0,1,1,1,1],[0,0,1,1,1,1,0,0],[0,1,1,0,0,1,1,0]])
print(graycode.dtype)
punkte=np.stack([x,y,z], axis=-1)

vertices=[]
faces=[]
for i in range(step-1):
    for j in range(step-1):
        for k in range(step-1):
            points=vol[i+graycode[0],j+graycode[1],k+graycode[2]]#points=[vol[i,j,k],vol[i,j,k+1],vol[i,j+1,k+1],vol[i,j+1,k],vol[i+1,j+1,k],vol[i+1,j+1,k+1],vol[i+1,j,k+1],vol[i+1,j,k]]
            d=delta[i+graycode[0],j+graycode[1],k+graycode[2],:]
            #print(d)
            parity=1
            #dvecvor=d[-1]
            key=1
            #[0,4,6,2,3,7,5,1]
            for ivec,shift in zip(range(1,len(d)),[4,6,2,3,7,5,1]):
                parity^=sum(d[ivec-1]*d[ivec])<0
                key|=parity<<shift
            #print(key)
            for triangle in lot[key]:

                plst=[]
                for vert in triangle:
                    plst.append(sum([punkte[(i+(ecke&1),j+((ecke>>1)&1),k+((ecke>>2)&1))]for ecke in verts[vert]]))
                faces.extend([3,len(vertices),len(vertices)+1,len(vertices)+2])
                vertices.extend(plst)
                    
                    
                    #x, y, z

            #create key for lookup

            #find kanten 
            #compute points on kanten
mesh=pv.PolyData(np.array(vertices).ravel(), strips=np.array(faces).ravel())
#print(vertices)
p.add_mesh(mesh,opacity=0.5,show_edges=1)


#grid["vol"]=vol.flatten()
#p.add_mesh(grid.contour([0]),opacity=0.5,show_edges=1)
p.show()
            






        
 